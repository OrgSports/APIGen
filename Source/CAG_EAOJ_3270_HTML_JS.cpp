// Static Model
#include "stdafx.h"
#include "apigen.h"

#include "CAG_EAOJ_3270_HTML_JS.h"


CAG_EAOJ_3270_HTML_JS::CAG_EAOJ_3270_HTML_JS()
{
	resetVariableFlags();	
}

CAG_EAOJ_3270_HTML_JS::~CAG_EAOJ_3270_HTML_JS()
{
	
}


void CAG_EAOJ_3270_HTML_JS::generateHeader(CStringArray* pcsaHeader,
										   CStringArray* pcsaBody)
{
	// name and open output file if specified
	SYSTEMTIME	systime;
	GetSystemTime(&systime);
	time_t osBinaryTime;
	time( &osBinaryTime ) ;
	CTime t( osBinaryTime );
	
	int nMonth = t.GetMonth();
	int nDay = t.GetDay();
	int nYear = t.GetYear();

	// output to Translator's output window
	CString csViewOutStuff;
	csViewOutStuff.Format( "%s", "// ****************************************************************************");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//                         Attachmate APIGen");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//              EAO for Java 3270 HTML JavaScript Application");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   This is a freestanding Java program that contains the sequence of Enterprise");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   Access Objects method calls a user specified in an earlier run of the APIGen");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   code generator.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   ");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   You can build and run this code several ways.  One very basic method is given");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   below.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   ");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//      1. Install the Attachmate product, Enterprise Access Objects for Java.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//      2. Install a Java SDK.  The small applications generated by the APIGen");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//         are routinely run on versions 1.3.* through 1.4.2");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//      3. With a Windows command prompt, navigate to the folder where the API-generated");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//      java file resides.  Enter the command line that will compile the Java source file into");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//      a Java class file that can be executed:  \"javac <generated file name>.java\".");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//      4. Run the resulting class file by entering the command line, \"java <generated file name>.class\".");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//      ");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   Several other means of accomplishing those four steps are available, such as by loading the");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   generated file into a Java development environment where you can edit, compile, run, and ");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   run-time debug.");
	pcsaHeader->Add(csViewOutStuff);

	time_t ltime;
	time( &ltime );

	csViewOutStuff.Format( "//");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   Generated:   %s", ctime( &ltime ) );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "// ****************************************************************************");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( " ");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "import java.awt.*;" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "import java.awt.event.*;" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "import com.attachmate.common.*;" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "import com.attachmate.common.types.*;" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "import com.attachmate.emulation.terminal.*;" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "import com.attachmate.emulation.session.*;");
	pcsaHeader->Add(csViewOutStuff);
	
	csViewOutStuff.Format( "import com.attachmate.emulation.screen.*;" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "import com.attachmate.emulation.conn.*;");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "import com.attachmate.emulation.renderer.*;");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "import com.attachmate.emulation.gui.*;");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "import com.attachmate.emulation.ft.*;" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "import com.attachmate.emulation.printer.*;");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "import com.attachmate.emulation.exception.*;");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "import com.attachmate.common.wait.*;" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( " ");
	pcsaHeader->Add(csViewOutStuff);
	
	csViewOutStuff.Format( "public class EAOJava extends Frame implements ActionListener");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "{" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "    static Frame f;" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "    private Panel DemoPanel;" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "    private Button RunDemoButton;" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "    public EAOJava()" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "    {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "      setTitle( \"Attachmate EAO Java Demo\" );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "      setSize( 600, 450 );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "/*      addWindowListener( new WindowAdapter()" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "      {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         public void windowClosing(WindowEvent e)" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            System.exit(0);" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "      }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "*/ " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "      DemoPanel = new Panel();" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "      RunDemoButton = new Button( \"Run EAO Java Demo\" );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "      RunDemoButton.addActionListener(this);" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "   " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "      DemoPanel.add( RunDemoButton );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "   " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "      setLayout( new BorderLayout() );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "      add( DemoPanel, BorderLayout.CENTER);" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "   }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "    public static void main(String[] args)" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "    {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         f = new EAOJava();" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         f.show();" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "    }" );
	pcsaBody->Add(csViewOutStuff);


	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "    public void actionPerformed( ActionEvent e )" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "    {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         if ( e.getSource() == RunDemoButton )" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            runDemo( f );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "    }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "    public void runDemo( Frame f )" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "    {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         boolean bRet;" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         Session session=null;" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         Screen3270 screen=null;" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         ConTN3270 conn=null;" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         Display3270Renderer display=null;" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         Status3270Renderer status=null;" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         Terminal term=null;" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         try" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            term = new Terminal();" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            conn = new ConTN3270();" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            conn.setEnterKey( true );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            conn.setRemoteHostAddress( \"ES9000\" );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            screen = new Screen3270();;" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            display = new Display3270Renderer();" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            status = new Status3270Renderer();" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            session = new Session();" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            session.setConnection( conn );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            session.setScreen( screen );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            term.setSession( session );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            term.setDisplay( display );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            term.setStatus( status );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            term.setVisible( true );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            term.setAutoConnect( false );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            term.setAutoSizeFont(true);" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            term.setAppearance(ITerminal.APPEARANCE_3D);" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            term.setEnableContextMenu( true );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            term.setIndicateFocus( true );" );
	pcsaBody->Add(csViewOutStuff);


	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "            DemoPanel.add(term, BorderLayout.CENTER);" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         catch( Exception e )" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               if ( term == null )" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "                  System.out.println( \"Init failed: terminal object is null.\");" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               if ( session == null )" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "                  System.out.println( \"Init failed: session object is null.\");" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               if ( conn == null )" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "                  System.out.println( \"Init failed: connection object is null.\");" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               if ( status == null )" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "                  System.out.println( \"Init failed: status object is null.\");" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               if ( display == null )" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "                  System.out.println( \"Init failed: display object is null.\");" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "               }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         f.add( term );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         f.setSize( 640, 480 );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         f.setVisible( true );" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         try" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "             if (term.getSession().isConnected() == false)" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "             {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "                 session.connect();" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "                 System.out.println(\"Connecting...\");" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "             }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "             if (term.isEnabled() == false)" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "             {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "                 // set the focus to the terminal" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "                 term.requestFocus();" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "             }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         }" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         catch (Exception ev)" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         {" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "             //handleException(ev);" );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "         }" );
	pcsaBody->Add(csViewOutStuff);


}

void CAG_EAOJ_3270_HTML_JS::appendBody(int nFunctionNum,
									   bool bPromptForValues,
									   CStringArray* pcsaArguments,
									   CStringArray* pcsaHeader,
									   CStringArray* pcsaBody)
{
	CString csViewOutStuff;
	CString csFunctionName, csFunctionNum, csString, csStringLength, csRetCode;

	csFunctionName = pcsaArguments->GetAt( 0 );

	if ( csFunctionName.Find( "Debug", 0 ) != -1 )
	{
		if ( b_Debug )
		{
			b_Debug = FALSE;
		}
		else
		{
			b_Debug = TRUE;
		}
	}

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);


	csViewOutStuff.Format( "         // *** %s", csFunctionName );
	pcsaBody->Add(csViewOutStuff);

	checkDebug( b_Debug, csFunctionName, pcsaBody );

	CString	csLocal;

	switch ( nFunctionNum )
	{
		case 0:		// ATMObject::getName
		{
			if ( !b_csName )
			{
				declareVariable( AG_NAME, pcsaHeader, &b_csName );
			}

			csViewOutStuff.Format( "         csName = session.getName();" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;

		case 1:		// ATMObject::getParentObject
		{
			if ( !b_Terminal )
			{
				declareVariable( AG_TERMINAL, pcsaHeader, &b_Terminal );
			}

			csViewOutStuff.Format( "         Terminal = session.getParentObject();" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;
		
		case 2:		// OIA::getErrorStatus
		{
			if ( !b_pOIAObject )
			{
				declareVariable( AG_OIAOBJ, pcsaHeader, &b_pOIAObject );
			}

			if ( !b_nStatus )
			{
				declareVariable( AG_STATUS, pcsaHeader, &b_nStatus );
			}

			csViewOutStuff.Format( "         OIAObj = screen.getOia();");
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         nStatus = OIAObj.getErrorStatus();");
			pcsaBody->Add(csViewOutStuff);


		}
		break;

		case 3:		// OIA::getOiaType
		{
			if ( !b_pOIAObject )
			{
				declareVariable( AG_OIAOBJ, pcsaHeader, &b_pOIAObject );
			}

			if ( !b_nType )
			{
				declareVariable( AG_TYPE, pcsaHeader, &b_nType );
			}


			csViewOutStuff.Format( "         OIAObj = screen.getOia();");
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         nType = OIAObj.getOiaType();");
			pcsaBody->Add(csViewOutStuff);


		}
		break;


		case 4:		// OIA::getText
		{
			if ( !b_pOIAObject )
			{
				declareVariable( AG_OIAOBJ, pcsaHeader, &b_pOIAObject );
			}

			if ( !b_cText )
			{
				declareVariable( AG_TEXT, pcsaHeader, &b_cText );
			}

			csViewOutStuff.Format( "         OIAObj = screen.getOia();");
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         cText = OIAObj.getText();");
			pcsaBody->Add(csViewOutStuff);


		}
		break;


		case 5:		// OIA::getXStatus
		{
			if ( !b_pOIAObject )
			{
				declareVariable( AG_OIAOBJ, pcsaHeader, &b_pOIAObject );
			}

			if ( !b_nStatus )
			{
				declareVariable( AG_STATUS, pcsaHeader, &b_nStatus );
			}


			csViewOutStuff.Format( "         OIAObj = screen.getOia();");
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         nStatus = OIAObj.getXStatus();");
			pcsaBody->Add(csViewOutStuff);


		}
		break;

		case 6:		// OIA::waitForXStatus
		{
			csViewOutStuff.Format( "   oiaObj->waitForXStatus( %s, %s );",	pcsaArguments->GetAt(1),
																			pcsaArguments->GetAt(2) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " " );
			pcsaBody->Add(csViewOutStuff);
		}
		break;

		case 7:		// Screen::clearScreen
		{
			csViewOutStuff.Format( "         screen.clearScreen();");
			pcsaBody->Add(csViewOutStuff);
		}
		break;

		case 8:		// Screen::fieldCount
		{
			if ( !b_nCount )
			{
				declareVariable( AG_COUNT, pcsaHeader, &b_nCount );
			}

			csViewOutStuff.Format( "         nCount = screen.fieldCount( %s );", pcsaArguments->GetAt(1) );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 9:		// Screen::getColumns
		{
			if ( !b_nCount )
			{
				declareVariable( AG_COUNT, pcsaHeader, &b_nCount );
			}

			csViewOutStuff.Format( "         nCount = screen.getColumns();" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 10:		// Screen::getCursorColumn
		{
			if ( !b_nColumn )
			{
				declareVariable( AG_COLUMN, pcsaHeader, &b_nColumn );			
			}

			csViewOutStuff.Format( "         nColumn = screen.getCursorColumn();" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 11:		// Screen::getCursorRow
		{
			if ( !b_nRow )
			{
				declareVariable( AG_ROW, pcsaHeader, &b_nRow );			
			}

			csViewOutStuff.Format( "         nRow = screen.getCursorRow();" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 12:		// Screen::getEabEnabled
		{
			if ( !b_bEABs )
			{
				declareVariable( AG_EAB, pcsaHeader, &b_bEABs );			
			}

			csViewOutStuff.Format( "         bEABs = screen.getEabEnabled();" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 13:	// Screen::getHostCharSet
		{
			if ( !b_nCharSet )
			{
				declareVariable( AG_HOST_CHARSET, pcsaHeader, &b_nCharSet );
			}

			csViewOutStuff.Format( "         nCharSet = screen.getHostCharSet();" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 14:	// Screen::getHostCodePage 
		{
			if ( !b_nHostCodePage )
			{
				declareVariable( AG_HOST_CODEPAGE, pcsaHeader, &b_nHostCodePage );
			}

			csViewOutStuff.Format( "         nHostCodePage = screen.getHostCodePage();" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 15:	// Screen::getKeyboardLocked
		{
			if ( !b_bKeyboardLocked )
			{
				declareVariable( AG_KBD_LOCKED, pcsaHeader, &b_bKeyboardLocked );
			}

			csViewOutStuff.Format( "         bKeyboardLocked = screen.getKeyboardLocked();" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 16:	// Screen::getModel
		{
			if ( !b_nModel )
			{
				declareVariable( AG_MODEL, pcsaHeader, &b_nModel );
			}

			csViewOutStuff.Format( "         nModel = screen.getModel();" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 17:	// Screen::getOia
		{
			if ( !b_pOIAObject )
			{
				declareVariable( AG_OIAOBJ, pcsaHeader, &b_pOIAObject );
			}

			csViewOutStuff.Format( "         OIAObj = screen.getOia();");
			pcsaBody->Add(csViewOutStuff);


		}
		break;

		case 18:	// Screen::getRows
		{
			if ( !b_nCount )
			{
				declareVariable( AG_COUNT, pcsaHeader, &b_nCount );
			}

			csViewOutStuff.Format( "         nCount = screen.getRows();" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 19:	// Screen::getScreenType
		{
			if ( !b_nType )
			{
				declareVariable( AG_TYPE, pcsaHeader, &b_nType );
			}

			csViewOutStuff.Format( "         nType = screen.getScreenType();");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 20:	// Screen::getString
		{
			if ( !b_nRow )
			{
				declareVariable( AG_ROW, pcsaHeader, &b_nRow );
			}

			if ( !b_nColumn )
			{
				declareVariable( AG_COLUMN, pcsaHeader, &b_nColumn );			
			}

			if ( !b_nLength )
			{
				declareVariable( AG_LENGTH, pcsaHeader, &b_nLength );			
			}

			if ( !b_cString )
			{
				declareVariable( AG_STRING, pcsaHeader, &b_cString );			
			}

			
			csViewOutStuff.Format( "         nRow = %s;", pcsaArguments->GetAt(1) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         nColumn = %s;", pcsaArguments->GetAt(2) );
			pcsaBody->Add(csViewOutStuff);
			

			csViewOutStuff.Format( "         nLength = %s;", pcsaArguments->GetAt(3) );
			pcsaBody->Add(csViewOutStuff);
			
			csViewOutStuff.Format( "         cString = screen.getString( nRow, nColumn, nLength );");
			pcsaBody->Add(csViewOutStuff);


		}
		break;



		case 21:	// Screen::getText
		{
			if ( !b_cText )
			{
				declareVariable( AG_TEXT, pcsaHeader, &b_cText );
			}

			csViewOutStuff.Format( "         cText = screen.getText();");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 22:	// Screen::putString
		{
			if ( !b_cString )
			{
				declareVariable( AG_STRING, pcsaHeader, &b_cString );			
			}

			if ( !b_nRow )
			{
				declareVariable( AG_ROW, pcsaHeader, &b_nRow );
			}

			if ( !b_nColumn )
			{
				declareVariable( AG_COLUMN, pcsaHeader, &b_nColumn );			
			}

			if ( !b_nLength )
			{
				declareVariable( AG_LENGTH, pcsaHeader, &b_nLength );			
			}


			csViewOutStuff.Format( "         cString = \"%s\";", pcsaArguments->GetAt(1) );
			pcsaBody->Add(csViewOutStuff);
			
			csViewOutStuff.Format( "         nRow = %s;", pcsaArguments->GetAt(2) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         nColumn = %s;", pcsaArguments->GetAt(3) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         nLength = screen.putString( cString, nRow, nColumn );");
			pcsaBody->Add(csViewOutStuff);
		}
		break;
	

		case 23:		// screen::refreshEvents
		{
			csViewOutStuff.Format( "         screen.refreshEvents();" );
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 24:		// screen.sendkeys
		{
			if ( !b_cText )
			{
				declareVariable( AG_TEXT, pcsaHeader, &b_cText );
			}

			if ( !b_nType )
			{
				declareVariable( AG_TYPE, pcsaHeader, &b_nType );
			}

			csViewOutStuff.Format( "         cText = \"%s\";", pcsaArguments->GetAt(1) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         nType = %s;", pcsaArguments->GetAt(2) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " " );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         screen.sendKeys( cText, nType );" );
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 25:	// Screen::setCursor
		{
			if ( !b_nRow )
			{
				declareVariable( AG_ROW, pcsaHeader, &b_nRow );
			}

			if ( !b_nColumn )
			{
				declareVariable( AG_COLUMN, pcsaHeader, &b_nColumn );			
			}

			csViewOutStuff.Format( "         nRow = %s;", pcsaArguments->GetAt(1) );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "         nColumn = %s;", pcsaArguments->GetAt(2) );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( " " );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         screen.setCursor( nRow, nColumn );");
			pcsaBody->Add(csViewOutStuff);

		}
		break;

		
		case 26:	// Screen::setEabEnabled
		{
			if ( !b_bEABs )
			{
				declareVariable( AG_EAB, pcsaHeader, &b_bEABs );			
			}

			csViewOutStuff.Format( "         bEABs = %s;", pcsaArguments->GetAt(1) );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( " " );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         screen.setEabEnabled( bEABs );");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 27:	// Screen::setHostCharSet
		{
			if ( !b_nCharSet )
			{
				declareVariable( AG_HOST_CHARSET, pcsaHeader, &b_nCharSet );
			}

			csViewOutStuff.Format( "         nCharSet = %s;", pcsaArguments->GetAt(1) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         screen.setHostCharSet( nCharSet );" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 28:	// Screen::setHostCodePage
		{
			if ( !b_nHostCodePage )
			{
				declareVariable( AG_HOST_CODEPAGE, pcsaHeader, &b_nHostCodePage );
			}

			csViewOutStuff.Format( "         nHostCodePage = %s;", pcsaArguments->GetAt(1) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         screen.setHostCodePage( nHostCodePage );" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 29:	// Screen::setModel
		{
			if ( !b_nModel )
			{
				declareVariable( AG_MODEL, pcsaHeader, &b_nModel );
			}

			csViewOutStuff.Format( "         nModel = %s;", pcsaArguments->GetAt(1) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " " );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         screen.setModel( nModel );" );
			pcsaBody->Add(csViewOutStuff);
		}
		break;
		

		case 30:		// screen.waitForCursor
		{
			if ( !b_nRow )
			{
				declareVariable( AG_ROW, pcsaHeader, &b_nRow );
			}

			if ( !b_nColumn )
			{
				declareVariable( AG_COLUMN, pcsaHeader, &b_nColumn );			
			}

			csViewOutStuff.Format( "         nRow = %s;", pcsaArguments->GetAt(1) );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "         nColumn = %s;", pcsaArguments->GetAt(2) );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( " " );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         screen.waitForCursor( nRow, nColumn );");
			pcsaBody->Add(csViewOutStuff);

		}
		break;

		
		case 31:		// screen.waitForKeys TODO:  This one is a mess!
		{
			if ( !b_nTimeout )
			{
				declareVariable( AG_TIMEOUT, pcsaHeader, &b_nTimeout );
			}

			if ( !b_cKeys )
			{
				declareVariable( AG_KEYS, pcsaHeader, &b_cKeys );
			}

			if ( !b_nMode )
			{
				declareVariable( AG_MODE, pcsaHeader, &b_nMode );
			}


			csViewOutStuff.Format( "         nTimeout = \"%s\";", pcsaArguments->GetAt(1) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         cKeys = %s;", pcsaArguments->GetAt(2) );
			pcsaBody->Add(csViewOutStuff);

			//csViewOutStuff.Format( "         nMode = %s;", pcsaArguments->GetAt(3) );
			//pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " " );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         screen.waitForKeys( nTimeout, cKeys, nMode );  //XXX" );
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 32:		// screen.waitForString
		{
			if ( !b_cText )
			{
				declareVariable( AG_TEXT, pcsaHeader, &b_cText );
			}

			if ( !b_nRow )
			{
				declareVariable( AG_ROW, pcsaHeader, &b_nRow );
			}

			if ( !b_nColumn )
			{
				declareVariable( AG_COLUMN, pcsaHeader, &b_nColumn );			
			}

			if ( !b_nWait )
			{
				declareVariable( AG_WAIT, pcsaHeader, &b_nWait );
			}

			csViewOutStuff.Format( "         cText = \"%s\";", pcsaArguments->GetAt(1) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         nRow = %s;", pcsaArguments->GetAt(2) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         nColumn = %s;", pcsaArguments->GetAt(3) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         nWait = %s;", pcsaArguments->GetAt(4) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " " );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         screen.waitForString( cText, nRow, nColumn, nWait );  //XXX");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 33:		// screen.waithostquiet
		{
			if ( !b_nWait )
			{
				declareVariable( AG_WAIT, pcsaHeader, &b_nWait );
			}

			csViewOutStuff.Format( "         nWait = %s;", pcsaArguments->GetAt(1) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " " );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         screen.waithostquiet( nWait );");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 34:	// Session::attach
		{
			csViewOutStuff.Format( "         try" );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         {" );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "             session.attach(session.ATTACH_MUSTBELOADED);" );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         }" );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         catch (e)" );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         {" );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "             alert( \"attach exception thrown\");" );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "         }" );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " " );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 35:	// session.connect
		{
			csViewOutStuff.Format( "         term.session.connect();");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 36:	// Session::detach
		{
			csViewOutStuff.Format( "         term.session.detach(0);");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 37:	// Session::disconnect 
		{
			csViewOutStuff.Format( "         term.session.disconnect(0);");
			pcsaBody->Add(csViewOutStuff);
		}
		break;

		
		case 38:	// Session::getAttached
		{
			
				if ( !b_bAttached )
				{
					declareVariable( AG_ATTACHED, pcsaHeader, &b_bAttached );				
				}

				csViewOutStuff.Format( "         try");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "             bAttached = session.getAttached();");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         catch (e)");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "             alert( \"getAttached exception thrown\" );");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				

		}
		break;


		case 39:	// Session::getConnected
		{
			
				if ( !b_bConnected )
				{
					declareVariable( AG_CONNECTED, pcsaHeader, &b_bConnected  );
				}

				csViewOutStuff.Format( "         try");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "             bConnected = session.getConnected();");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         catch (e)");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "             alert( \"getConnected exception thrown\" );");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				

		}
		break;


		case 40:	// Session::getConnection
		{
			
				if ( !b_ConnectionObj )
				{
					declareVariable( AG_CONNECTION_OBJ, pcsaHeader, &b_ConnectionObj );
				}

				csViewOutStuff.Format( "         try");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "             conn = session.getConnection();");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format(  "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         catch (e)");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "             alert( \"getConnection exception thrown\" );");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				

		}
		break;
				

		case 41:	// Session::getScreen
		{
				
				if ( !b_ScreenObj )
				{
				//	declareVariable( AG_SCREEN_OBJ, pcsaHeader, &b_ScreenObj );
				}

				csViewOutStuff.Format( "         try");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "             screen = session.getScreen();");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         catch (e)");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "             alert( \"getScreen exception thrown\" );");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				

		}
		break;

		
		case 42:	// Session::getState
		{
			if ( !b_nState )
			{
				declareVariable( AG_STATE, pcsaHeader, &b_nState );
			}
			
			csViewOutStuff.Format( "         nState = session.getState();");
			pcsaBody->Add(csViewOutStuff);
		}
		break;

		case 43:	// Session::setConnected
		{
			
				if ( !b_bConnected )
				{
					declareVariable( AG_CONNECTED, pcsaHeader, &b_bConnected  );
				}

				csViewOutStuff.Format( "         bConnected = TRUE;" );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( " " );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         try");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "             session.setConnected( bConnected );");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         catch (e)");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "             alert( \"setConnected exception thrown\" );");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				

		}
		break;


		case 44:	// Session::setConnection
		{
			
				if ( !b_ConnectionObj )
				{
					declareVariable( AG_CONNECTION_OBJ, pcsaHeader, &b_ConnectionObj );
				}

				csViewOutStuff.Format( "         try");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "             session.setConnection( conn );");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         catch (e)");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "              alert( \"setConnection exception thrown\" );");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				

		}
		break;

		case 45:	// Session::setScreen
		{
				
				if ( !b_ScreenObj )
				{
					//declareVariable( AG_SCREEN_OBJ, pcsaHeader, &b_ScreenObj );
				}

				csViewOutStuff.Format( "         try");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "             session.setScreen( screen );");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         catch (e)");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         {");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "             alert( \"setScreen exception thrown\" );");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         }");
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				

		}
		break;


		case 46:	// ITelnetProxy::getSocksAddress
		{
				
				if ( !b_ConnectionObj )
				{
					declareVariable( AG_CONNECTION_OBJ, pcsaHeader, &b_ConnectionObj );
				}
				
				if ( !b_cText )
				{
					declareVariable( AG_TEXT, pcsaHeader, &b_cText );
				}

				csViewOutStuff.Format( "         cText = conn.getSocksAddress();" );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				
		}
		break;


		case 47:	// ITelnetProxy::getSocksPort
		{
				
				if ( !b_ConnectionObj )
				{
					declareVariable( AG_CONNECTION_OBJ, pcsaHeader, &b_ConnectionObj );
				}
				
				if ( !b_nPort )
				{
					declareVariable( AG_PORT, pcsaHeader, &b_nPort );
				}

				csViewOutStuff.Format( "         nPort = conn.getSocksPort();" );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				
		}
		break;


		case 48:	// ITelnetProxy::getTelnetAddress
		{
				
				if ( !b_ConnectionObj )
				{
					declareVariable( AG_CONNECTION_OBJ, pcsaHeader, &b_ConnectionObj );
				}
				
				if ( !b_cText )
				{
					declareVariable( AG_TEXT, pcsaHeader, &b_cText );
				}

				csViewOutStuff.Format( "         cText = conn.getTelnetAddress();" );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				
		}
		break;


		case 49:	// ITelnetProxy::getTelnetPort
		{
				
				if ( !b_ConnectionObj )
				{
					declareVariable( AG_CONNECTION_OBJ, pcsaHeader, &b_ConnectionObj );
				}
				
				if ( !b_nPort )
				{
					declareVariable( AG_PORT, pcsaHeader, &b_nPort );
				}

				csViewOutStuff.Format( "         nPort = conn.getTelnetPort();" );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				
		}
		break;


		case 50:	// ITelnetProxy::setSocksAddress
		{
				
				if ( !b_ConnectionObj )
				{
					declareVariable( AG_CONNECTION_OBJ, pcsaHeader, &b_ConnectionObj );
				}
				
				if ( !b_cText )
				{
					declareVariable( AG_TEXT, pcsaHeader, &b_cText );
				}

				csViewOutStuff.Format( "         cText = \"%s\";", pcsaArguments->GetAt(1) );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         conn.setSocksAddress( cText );" );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				
		}
		break;


		case 51:	// ITelnetProxy::setSocksPort
		{
				
				if ( !b_ConnectionObj )
				{
					declareVariable( AG_CONNECTION_OBJ, pcsaHeader, &b_ConnectionObj );
				}
				
				if ( !b_nPort )
				{
					declareVariable( AG_PORT, pcsaHeader, &b_nPort );
				}

				csViewOutStuff.Format( "         nPort = %s;", pcsaArguments->GetAt(1) );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         conn.setSocksPort( nPort );" );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				
		}
		break;


		case 52:	// ITelnetProxy::setTelnetAddress
		{
				
				if ( !b_ConnectionObj )
				{
					declareVariable( AG_CONNECTION_OBJ, pcsaHeader, &b_ConnectionObj );
				}
				
				if ( !b_cText )
				{
					declareVariable( AG_TEXT, pcsaHeader, &b_cText );
				}

				csViewOutStuff.Format( "         cText = \"%s\";", pcsaArguments->GetAt(1) );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         conn.setTelnetAddress( cText );" );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				
		}
		break;


		case 53:	// ITelnetProxy::setTelnetPort
		{
				
				if ( !b_ConnectionObj )
				{
					declareVariable( AG_CONNECTION_OBJ, pcsaHeader, &b_ConnectionObj );
				}
				
				if ( !b_nPort )
				{
					declareVariable( AG_PORT, pcsaHeader, &b_nPort );
				}

				csViewOutStuff.Format( "         nPort = %s;", pcsaArguments->GetAt(1) );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "         conn.setTelnetPort( nPort );" );
				pcsaBody->Add(csViewOutStuff);

				csViewOutStuff.Format( "");
				pcsaBody->Add(csViewOutStuff);
				
		}
		break;


	}

	pcsaArguments->RemoveAll();
}


void CAG_EAOJ_3270_HTML_JS::finalize(CStringArray* pcsaBody)
{
	CString csViewOutStuff;

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "      }");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "}");
	pcsaBody->Add(csViewOutStuff);

	b_Debug = FALSE;
}

void CAG_EAOJ_3270_HTML_JS::declareVariable(AG_VARIABLE agVariable,
											CStringArray* pcsaHeader,
											bool* bValue)
{
	CString csLocal;
	*bValue = TRUE;
	
	switch ( agVariable )
	{
		case AG_STATUS:
		{
			csLocal.Format( "   int nStatus=0;");
		}
		break;

		case AG_UPDATED:
		{
			csLocal.Format( "    boolean bUpdated=false;");
		}
		break;

		case AG_UTILBUFFER:
		{
			csLocal.Format( "    String Buffer=\" \";");
		}
		break;

		case AG_ROW:
		{
			csLocal.Format( "   int nRow=0;");
		}
		break;

		case AG_COLUMN:
		{
			csLocal.Format( "   int nColumn=0;");		
		}
		break;

		case AG_ATTRIBUTE:
		{
			csLocal.Format( "   int nAttribute=0;");
		}
		break;

		case AG_KEYS:
		{
			csLocal.Format( "   String cKeys;");
		}
		break;


		case AG_LENGTH:
		{
			csLocal.Format( "   int nLength=0;");
		}
		break;

		case AG_VALUE:
		{
			csLocal.Format( "   int nValue=0;");
		}
		break;

		case AG_RETURN:
		{
			csLocal.Format( "    boolean bRet=false;");
		}
		break;

		case AG_CLOSEOPTION:
		{
			csLocal.Format( "   int nCloseOption=0;");
		}
		break;

		case AG_HOST_OS:
		{
			csLocal.Format( "   int nFTHostOS=0;");
		}
		break;

		case AG_HEIGHT:
		{
			csLocal.Format( "   int nHeight=0;");
		}
		break;

		case AG_LOCALMODE:
		{
			csLocal.Format( "    boolean bLocalMode=false;");
		}
		break;

		case AG_SESS_SAVED:
		{
			csLocal.Format( "    boolean bSessionSaved=false;");
		}
		break;

		case AG_SESSIONS_CREATED:
		{
			csLocal.Format( "    String Sessions[];" );
		}
		break;

		case AG_SESS_OPEN:
		{
			csLocal.Format( "    String SessName=\" \";");
		}
		break;


		case AG_SETTLE_TIME:
		{
			csLocal.Format( "   int nSettleTime=0;");
		}
		break;

		case AG_SESS_QUIET:
		{
			csLocal.Format( "    boolean bSessionQuiet=false;");
		}
		break;

		case AG_MENU_VISIBLE:
		{
			csLocal.Format( "    boolean bMenuVisible=false;");
		}
		break;

		case AG_TYPE:
		{
			csLocal.Format( "   int nType=0;");
		}
		break;

		case AG_TIMEOUT:
		{
			csLocal.Format( "   int nTimeout=0;");
		}
		break;

		case AG_PROCESS_KEYSTROKES:
		{
			csLocal.Format( "    boolean bProcessKeystrokes=false;");
		}
		break;

		case AG_WIDTH:
		{
			csLocal.Format( "   int nWidth=0;");
		}
		break;

		case AG_WINDOW_HANDLE:
		{
			csLocal.Format( "   int hSession=0;");
			//csLocal.Format( "         HANDLE hSession=NULL;");
		}
		break;

		case AG_WINDOW_STATE:
		{
			csLocal.Format( "   int nWindowState=0;");
		}
		break;

		case AG_COUNT:
		{
			csLocal.Format( "   int nCount=0;");
		}
		break;

		case AG_AREA:
		{
			csLocal.Format( "    //String Area=\" \";");
		}
		break;

		// new stuff
		case AG_NAME:
		{
			csLocal.Format( "    String csName=\" \";" );
		}
		break;

		case AG_TERMINAL:
		{
			csLocal.Format( "    //Terminal;" );
		}
		break;

		case AG_OIAOBJ:
		{
			csLocal.Format( "    Oia3270 OIAObj;" );
		}
		break;

		case AG_TEXT:
		{
			csLocal.Format( "    String cText=\" \";" );
		}
		break;

		case AG_EAB:
		{
			csLocal.Format( "    boolean bEABs=false;" );
		}
		break;

		case AG_HOST_CHARSET:
		{
			csLocal.Format( "   int nCharSet=0;" );
		}
		break;

		case AG_HOST_CODEPAGE:
		{
			csLocal.Format( "   int nHostCodePage=0;" );
		}
		break;

		case AG_KBD_LOCKED:
		{
			csLocal.Format( "    boolean bKeyboardLocked=false;" );
		}
		break;

		case AG_MODEL:	
		{
			csLocal.Format( "   int nModel=0;" );
		}
		break;

		case AG_STRING:
		{
			csLocal.Format( "    String cString=\" \";" );
		}
		break;

		case AG_MODE:
		{
			csLocal.Format( "   int nMode=0;" );
		}
		break;

		case AG_WAIT:
		{
			csLocal.Format( "   int nWait=0;" );
		}
		break;

		case AG_ATTACHED:
		{
			csLocal.Format( "    boolean bAttached=false;" );
		}
		break;

		case AG_CONNECTED:
		{
			csLocal.Format( "    boolean bConnected=false;" );
		}
		break;

		case AG_CONNECTION_OBJ:
		{
			csLocal.Format( "    ConTN3270 conn;" );
		}
		break;

		case AG_SCREEN_OBJ:
		{
			csLocal.Format( "    Screen3270 screen;" );
		}
		break;

		case AG_STATE:
		{
			csLocal.Format( "   int nState=0;" );
		}
		break;

		case AG_PORT:
		{
			csLocal.Format( "   int nPort=0;" );
		}
		break;




	}

	pcsaHeader->Add(csLocal);

}

void CAG_EAOJ_3270_HTML_JS::checkDebug(bool b_Debug,
								 CString csFunctionName,
								 CStringArray* pcsaBody)
{
	CString csLocal;
	
	if ( b_Debug )
	{
		csLocal.Format( "   alert( \"%s\" );", csFunctionName );
		pcsaBody->Add(csLocal);
	}
}


void CAG_EAOJ_3270_HTML_JS::resetVariableFlags()
{
   b_pOIAObject = FALSE;
   b_nStatus = FALSE;
   b_nType = FALSE;
   b_cText = FALSE;
   b_nCount = FALSE;
   b_nColumn = FALSE;
   b_nRow = FALSE;
   b_bEABs = FALSE;
   b_nCharSet = FALSE;
   b_nHostCodePage = FALSE;
   b_bKeyboardLocked = FALSE;
   b_nModel = FALSE;
   b_nLength = FALSE;
   b_cString = FALSE;
   b_bAttached = FALSE;
   b_csName=FALSE;
   b_Terminal=FALSE;
   b_nMode=FALSE;
   b_nWait=FALSE;
   b_bConnected=FALSE;
   b_ConnectionObj=FALSE;
   b_ScreenObj=FALSE;
   b_nState=FALSE;
   b_nPort=FALSE;
   b_nTimeout=FALSE;
   b_cKeys=FALSE;

   b_Debug=FALSE;
}
