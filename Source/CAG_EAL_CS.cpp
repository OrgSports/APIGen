// Static Model
#include "stdafx.h"
#include "apigen.h"

#include "CAG_EAL_CS.h"

/////////////////////////////////////////////////////////////////////////////
// EAL
/////////////////////////////////////////////////////////////////////////////

CAG_EAL_CS::CAG_EAL_CS()
{
	resetVariableFlags();	
}

CAG_EAL_CS::~CAG_EAL_CS()
{
	
}


void CAG_EAL_CS::generateHeader(CStringArray* pcsaHeader,
								CStringArray* pcsaBody)
{
	// output to Translator's output window
	CString csViewOutStuff;

	csViewOutStuff.Format( "//  ****************************************************************************");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//          Attachmate APIGen EAL");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//               C# Application");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  This is EAL code that is prepared to run within the framework of another");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  application. Because EAL is an API that is intended to run within a Windows");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  native application, APIGen generated an OnInitDialog function that is to be");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  dropped into a freshly created Microsoft Visual Studio dialog application.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  After you do that you should be able to build and run the code sequence");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  that you specified to the API Generator as is.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//");
	pcsaHeader->Add(csViewOutStuff);
	
	csViewOutStuff.Format( "//  Steps to use this file:");
	pcsaHeader->Add(csViewOutStuff);
	
	csViewOutStuff.Format( "//  1. Install Extra! with a version newer than 6.1");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  2. Create a new session using Extra!'s new session wizard.  Save it");
	pcsaHeader->Add(csViewOutStuff);	
		
	csViewOutStuff.Format( "//     and then associate it with a HLLAPI session short name in the Advanced");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     property page that you can access after choosing the Options\\Global");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     Settings menu.");

	csViewOutStuff.Format( "//  3. Create a new Visual Studio project using the File\\New-Project menu");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     Be sure to choose the option to create a dialog application.  A dialog");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     application will include an OnInitDialog function that you will replace");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     with the one below in this file.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  4. Copy the files atmapi32.h and atmapi32.lib to the directory where the new");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     project is built. " );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  5. Copy the OnInitDialog function below over the one generated by Visual Studio");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     in the dialog class cpp file.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  6. Move the line, #include \"atmapi32.h\" to the top of your dialog class file.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     The project should build and run as-is.");
	pcsaHeader->Add(csViewOutStuff);


	time_t ltime;
	time( &ltime );

	csViewOutStuff.Format( "//");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   Generated:   %s", ctime( &ltime ) );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   ****************************************************************************");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "%s", "" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "#include \"atmapi32.h\"");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "BOOL CEALDlg::OnInitDialog()" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "{" );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "     CDialog::OnInitDialog();");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "     SetIcon(m_hIcon, TRUE);     // Set big icon");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "     SetIcon(m_hIcon, FALSE);    // Set small icon");
	pcsaHeader->Add(csViewOutStuff);
	
	csViewOutStuff.Format( " " );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "     HWND Handle;;");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   ***************************************************************");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "     CWnd* MainCWnd =  AfxGetMainWnd( );");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "     Handle = MainCWnd->m_hWnd;");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

}


void CAG_EAL_CS::appendBody(int nFunctionNum,
							bool bPromptForValues,
							CStringArray* pcsaArguments,
							CStringArray* pcsaHeader,
							CStringArray* pcsaBody)
{
	CString csViewOutStuff;
	CString csFunctionName, csFunctionNum, csString, csStringLength, csRetCode;
	CString csLocal;

	csFunctionName = pcsaArguments->GetAt( 0 );
	csViewOutStuff.Format( "     //Function: %s", csFunctionName );
	pcsaBody->Add(csViewOutStuff);

	switch ( nFunctionNum )
	{
		case 0:		// ATMAddWait
		case 2:		// ATMAddWaitForCursorMove
		case 3:		// ATMAddWaitForHostConnect
		case 4:		// ATMAddWaitForHostDisconnect
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nTable )
			{
				b_nTable = TRUE;
				csLocal.Format( "     int nTable=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nEvent )
			{
				b_nEvent = TRUE;
				csLocal.Format( "     int nEvent=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "     nTable = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nEvent = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nTable, nEvent );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;

		case 1:		// ATMAddWaitForCursor
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nTable )
			{
				b_nTable = TRUE;
				csLocal.Format( "     int nTable=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nEvent )
			{
				b_nEvent = TRUE;
				csLocal.Format( "     int nEvent=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nRow )
			{
				b_nRow = TRUE;
				csLocal.Format( "     int nRow=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nColumn )
			{
				b_nColumn = TRUE;
				csLocal.Format( "     int nColumn=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "     nTable = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nEvent = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRow = %s;", pcsaArguments->GetAt( 3 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nColumn = %s;", pcsaArguments->GetAt( 4 ) );
			pcsaBody->Add(csViewOutStuff);


			csViewOutStuff.Format( "     nRet = %s( Handle, nTable, nEvent, nRow, nColumn );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 5:		// ATMAddWaitForKey
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nTable )
			{
				b_nTable = TRUE;
				csLocal.Format( "     int nTable=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nEvent )
			{
				b_nEvent = TRUE;
				csLocal.Format( "     int nEvent=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}
			
			csViewOutStuff.Format( "     nTable = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nEvent = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( %i );", (pcsaArguments->GetAt( 3 )).GetLength()+1 );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     strcpy( pUtilityBuffer, \"%s\");", pcsaArguments->GetAt( 3 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nTable, nEvent );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 6:		// ATMAddWaitForString
		case 7:		// ATMAddWaitForStringNotAt
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nTable )
			{
				b_nTable = TRUE;
				csLocal.Format( "     int nTable=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nEvent )
			{
				b_nEvent = TRUE;
				csLocal.Format( "     int nEvent=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nRow )
			{
				b_nRow = TRUE;
				csLocal.Format( "     int nRow=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nColumn )
			{
				b_nColumn = TRUE;
				csLocal.Format( "     int nColumn=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}

			csViewOutStuff.Format( "     nTable = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nEvent = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRow = %s;", pcsaArguments->GetAt( 3 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nColumn = %s;", pcsaArguments->GetAt( 4 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( %i );", (pcsaArguments->GetAt( 5 )).GetLength()+1 );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     strcpy( pUtilityBuffer, \"%s\");", pcsaArguments->GetAt( 5 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nTable, nEvent, nRow, nColumn, pUtilityBuffer );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;



		case 8:		// ATMAddWaitHostQuiet
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nTable )
			{
				b_nTable = TRUE;
				csLocal.Format( "     int nTable=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nEvent )
			{
				b_nEvent = TRUE;
				csLocal.Format( "     int nEvent=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nSettleTime )
			{
				b_nSettleTime = TRUE;
				csLocal.Format( "     int nSettleTime=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "     nTable = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nEvent = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nSettleTime = %s;", pcsaArguments->GetAt( 3 ) );
			pcsaBody->Add(csViewOutStuff);



			csViewOutStuff.Format( "     nRet = %s( Handle, nTable, nEvent, nSettleTime );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;



		case 13:	// ATMDeleteEvent
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nTable )
			{
				b_nTable = TRUE;
				csLocal.Format( "     int nTable=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nEvent )
			{
				b_nEvent = TRUE;
				csLocal.Format( "     int nEvent=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "     nTable = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nEvent = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nTable, nEvent );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 9:		// ATMAllowUpdates
		case 10:	// ATMBlockUpdates
		case 14:	// ATMDisconnectSession
		case 30:	// ATMGetSessionSize
		case 34:	// ATMHoldHost
		case 36:	// ATMLockKeyboard
		case 41:	// ATMResetSystem
		case 42:	// ATMResumeHost
		case 52:	// ATMSessionOff
		case 53:	// ATMSessionOn
		case 56:	// ATMShowLastError
		case 60:	// ATMStopSession
		case 61:	// ATMUnlockKeyboard
		case 62:	// ATMUnregisterClient
		case 63:	// ATMWait
		{
			
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			csViewOutStuff.Format( "     nRet = %s( Handle );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 12:		// ATMConnectSession
		case 28:		// ATMGetSessionHandle
		case 59:		// ATMStopKeystrokeIntercept
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_cSession )
			{
				b_cSession = TRUE;
				csLocal.Format( "     char cSession;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     cSession = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     nRet = %s( Handle, cSession );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 15:		// ATMExecute
		{

			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}

			if ( !b_nTimeout )
			{
				b_nTimeout = TRUE;
				csLocal.Format( "     int nTimeout=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( %i );", (pcsaArguments->GetAt( 1 )).GetLength()+1 );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     strcpy( pUtilityBuffer, \"%s\");", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nTimeout = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);


			csViewOutStuff.Format( "     nRet = %s( Handle, pUtilityBuffer, nTimeout );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;

		case 16:		// ATMGetATMAPIVersion
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}

			if ( !b_nLength )
			{
				b_nLength = TRUE;
				csLocal.Format( "     int nLength=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "%s", "     nLength=6;");
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "%s", "     pUtilityBuffer = (char *)malloc( nLength+1 );");
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( pUtilityBuffer, nLength );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;

		
		case 19:	// ATMGetEmulatorPath
		case 21:	// ATMGetError
		case 26:	// ATMGetLayoutName
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}


			if ( !b_nLength )
			{
				b_nLength = TRUE;
				csLocal.Format( "     int nLength=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "%s", "     nLength=512;");
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "%s", "     pUtilityBuffer = (char *)malloc( nLength+1 );");
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "%s%s%s", "     nRet = ", csFunctionName, "( Handle, pUtilityBuffer, nLength );");
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;



		case 17:		// ATMGetConnectionStatus
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nType )
			{
				b_nType = TRUE;
				csLocal.Format( "     int nType=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     nType = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);
			
			csViewOutStuff.Format( "     nRet = %s( Handle, nType );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;

		case 18:	// ATMGetCursorLocation
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     nRet = %s( Handle );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;

		case 20:	// ATMGetEmulatorVersion
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}


			if ( !b_nLength )
			{
				b_nLength = TRUE;
				csLocal.Format( "     int nLength=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "%s", "     nLength=6;");
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "%s", "     pUtilityBuffer = (char *)malloc( nLength+1 );");
			pcsaBody->Add(csViewOutStuff);


			csViewOutStuff.Format( "     nRet = %s( Handle, pUtilityBuffer, nLength );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 22:	// ATMGetFieldInfo
		case 23:	// ATMGetFieldLength
		case 24:	// ATMGetFieldPosition
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nRow )
			{
				b_nRow = TRUE;
				csLocal.Format( "     int nRow=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nColumn )
			{
				b_nColumn = TRUE;
				csLocal.Format( "     int nColumn=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nType )
			{
				b_nType = TRUE;
				csLocal.Format( "     int nType=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "     nRow= %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nColumn = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nType = %s;", pcsaArguments->GetAt( 3 ) );
			pcsaBody->Add(csViewOutStuff);


			csViewOutStuff.Format( "     nRet = %s( Handle, nRow, nColumn, nType );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 25:	// ATMGetKeyStroke
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_cSession )
			{
				b_cSession = TRUE;
				csLocal.Format( "     char cSession;");
				pcsaHeader->Add(csLocal);
			}


			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}


			if ( !b_nLength )
			{
				b_nLength = TRUE;
				csLocal.Format( "     int nLength=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     cSession='%s';", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nLength = %s;", "512" );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "%s", "     pUtilityBuffer = (char *)malloc( nLength+1 );");
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, cSession, pUtilityBuffer, nLength );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;
			

		case 27:	// ATMGetParameter
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nIndex )
			{
				b_nIndex = TRUE;
				csLocal.Format( "     int nIndex=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     nIndex = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nIndex );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 29:	// ATMGetSessions
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}

			if ( !b_nLength )
			{
				b_nLength = TRUE;
				csLocal.Format( "     int nLength=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nSessState )
			{
				b_nSessState = TRUE;
				csLocal.Format( "     int nSessState=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     nLength = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( nLength+1 );");
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     nSessState=%s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, pUtilityBuffer, nLength, nSessState );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 31:	// ATMGetSessionStatus
		case 57:	// ATMStartKeystrokeIntercept
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_cSession )
			{
				b_cSession = TRUE;
				csLocal.Format( "     char cSession;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nType )
			{
				b_nType = TRUE;
				csLocal.Format( "     int nType=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     cSession = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nType = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, cSession, nType );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 32:	// ATMGetString
		case 33:	// ATMGetStringFromField
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nRow )
			{
				b_nRow = TRUE;
				csLocal.Format( "     int nRow=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nColumn )
			{
				b_nColumn = TRUE;
				csLocal.Format( "     int nColumn=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}


			if ( !b_nLength )
			{
				b_nLength = TRUE;
				csLocal.Format( "     int nLength=0;");
				pcsaHeader->Add(csLocal);
			}



			csViewOutStuff.Format( "     nRow = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nColumn = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nLength = %s;", pcsaArguments->GetAt( 3 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "%s", "     pUtilityBuffer = (char *)malloc( nLength+1 );");
			pcsaBody->Add(csViewOutStuff);


			csViewOutStuff.Format( "     nRet = %s( Handle, nRow, nColumn, pUtilityBuffer, nLength );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 35:	// ATMListSessions
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}


			if ( !b_pTitleBuffer )
			{
				b_pTitleBuffer = TRUE;
				csLocal.Format( "     char *pTitle;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csViewOutStuff.Format( "    free( pTitle );");
				pcsaBody->Add(csViewOutStuff);
			}


			if ( !b_nLength )
			{
				b_nLength = TRUE;
				csLocal.Format( "     int nLength=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nType )
			{
				b_nType = TRUE;
				csLocal.Format( "     int nType=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     nLength = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     pTitle =  (char *)malloc( %i+1 );", (pcsaArguments->GetAt( 2 )).GetLength() );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     strcpy( pTitle, \"%s\" );", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     nType = %s;", pcsaArguments->GetAt( 3 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "%s", "     pUtilityBuffer = (char *)malloc( nLength+1 );");
			pcsaBody->Add(csViewOutStuff);


			csViewOutStuff.Format( "     nRet = %s( Handle, pUtilityBuffer, nLength, pTitle, nType );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;



		case 37:	// ATMOpenLayout
		case 49:	// ATMSendKey
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}


			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( %i );", (pcsaArguments->GetAt( 1 )).GetLength()+1 );
			pcsaBody->Add(csViewOutStuff);

			

			csViewOutStuff.Format( "     strcpy( pUtilityBuffer, \"%s\");", pcsaArguments->GetAt( 1 ) );
			if ( nFunctionNum == 41 || nFunctionNum == 42 )
			{
				csViewOutStuff.Replace( "\\", "\\\\" );
			}
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, pUtilityBuffer );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 38:	// ATMPause
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nPauseTime )
			{
				b_nPauseTime = TRUE;
				csLocal.Format( "     int nPauseTime=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     nPauseTime = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);
			
			csViewOutStuff.Format( "     nRet = %s( Handle, nPauseTime );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;

		case 39:	// ATMReceiveFile
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}


			if ( !b_nLength )
			{
				b_nLength = TRUE;
				csLocal.Format( "     int nLength=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "     nLength = %i;", (pcsaArguments->GetAt( 1 )).GetLength()+1 );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( nLength );");
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     strcpy( pUtilityBuffer, \"%s\");", pcsaArguments->GetAt( 1 ) );
			csViewOutStuff.Replace( "\\", "\\\\" );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, pUtilityBuffer, nLength );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;

		
		case 40:		// ATMRegisterClient
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nType )
			{
				b_nType = TRUE;
				csLocal.Format( "     int nType=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     nType = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);
			
			csViewOutStuff.Format( "     nRet = %s( Handle, nType );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 43:	// ATMRowColumn
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nPosition )
			{
				b_nPosition = TRUE;
				csLocal.Format( "     int nPosition=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nOption )
			{
				b_nOption = TRUE;
				csLocal.Format( "     int nOption=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     nPosition = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);
			
			csViewOutStuff.Format( "     nOption = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nPosition, nOption );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 44:	// ATMRunEmulatorMacro
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_cSession )
			{
				b_cSession = TRUE;
				csLocal.Format( "     char cSession;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}

			csViewOutStuff.Format( "     cSession = '%s';", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csLocal);

			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( %i );", (pcsaArguments->GetAt( 2 )).GetLength()+1 );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     strcpy( pUtilityBuffer, \"%s\" );", pcsaArguments->GetAt( 2 ) );
			csViewOutStuff.Replace( "\\", "\\\\" );
			pcsaBody->Add(csViewOutStuff);
			
			csViewOutStuff.Format( "     nRet = %s( Handle, cSession, pUtilityBuffer );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;

		case 45:	// ATMSearchField
		case 50:	// ATMSendString
		case 51:	// ATMSendStringToField
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nRow )
			{
				b_nRow = TRUE;
				csLocal.Format( "     int nRow=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nColumn )
			{
				b_nColumn = TRUE;
				csLocal.Format( "     int nColumn=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}



			csViewOutStuff.Format( "     nRow = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nColumn = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( %i );", (pcsaArguments->GetAt( 3 )).GetLength()+1 );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     strcpy( pUtilityBuffer, \"%s\");", pcsaArguments->GetAt( 3 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nRow, nColumn, pUtilityBuffer );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 46:	// ATMSearchSession
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nRow )
			{
				b_nRow = TRUE;
				csLocal.Format( "     int nRow=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nColumn )
			{
				b_nColumn = TRUE;
				csLocal.Format( "     int nColumn=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nOption )
			{
				b_nOption = TRUE;
				csLocal.Format( "     int nOption=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}



			csViewOutStuff.Format( "     nRow = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nColumn = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( %i );", (pcsaArguments->GetAt( 3 )).GetLength()+1 );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     strcpy( pUtilityBuffer, \"%s\" );", pcsaArguments->GetAt( 3 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nOption = %s;", pcsaArguments->GetAt( 4 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nRow, nColumn, pUtilityBuffer, nOption );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 47:	// ATMSendAndWait
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nRow )
			{
				b_nRow = TRUE;
				csLocal.Format( "     int nRow=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nColumn )
			{
				b_nColumn = TRUE;
				csLocal.Format( "     int nColumn=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nOption )
			{
				b_nOption = TRUE;
				csLocal.Format( "     int nOption=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}


			if ( !b_pWaitForBuffer )
			{
				b_pWaitForBuffer = TRUE;
				csLocal.Format( "     char *pWaitForBuffer;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nTimeout )
			{
				b_nTimeout = TRUE;
				csLocal.Format( "     int nTimeout=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "     nRow = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nColumn = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( %i );", (pcsaArguments->GetAt( 3 )).GetLength()+1 );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     strcpy( pUtilityBuffer, \"%s\" );", pcsaArguments->GetAt( 3 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     pWaitForBuffer = \"%s\";", pcsaArguments->GetAt( 4 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nTimeout = %s;", pcsaArguments->GetAt( 5 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nRow, nColumn, pUtilityBuffer, pWaitForBuffer, nTimeout );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 48:	// ATMSendFile
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}


			if ( !b_nLength )
			{
				b_nLength = TRUE;
				csLocal.Format( "     int nLength=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "     nLength = %i;", (pcsaArguments->GetAt( 1 )).GetLength()+1 );
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( nLength );");
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     strcpy( pUtilityBuffer, \"%s\");", pcsaArguments->GetAt( 1 ) );
			csViewOutStuff.Replace( "\\", "\\\\" );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, pUtilityBuffer, nLength );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 54:	// ATMSetCursorLocation
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nRow )
			{
				b_nRow = TRUE;
				csLocal.Format( "     int nRow=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nColumn )
			{
				b_nColumn = TRUE;
				csLocal.Format( "     int nColumn=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     nRow = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nColumn = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);


			csViewOutStuff.Format( "     nRet = %s( Handle, nRow, nColumn );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 55:	// ATMSetParameter
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nIndex )
			{
				b_nIndex = TRUE;
				csLocal.Format( "     int nIndex=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nSetting )
			{
				b_nSetting = TRUE;
				csLocal.Format( "     int nSetting=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_cEscape )
			{
				b_cEscape = TRUE;
				csLocal.Format( "     char cEscape;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     nIndex = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nSetting = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     cEscape = '%s';", pcsaArguments->GetAt( 3 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nIndex, nSetting, cEscape );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;



		case 58:	// ATMStartSession
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_cSession )
			{
				b_cSession = TRUE;
				csLocal.Format( "     char cSession;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}


			csViewOutStuff.Format( "     cSession = '%s';", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( 2 );");
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     strcpy( pUtilityBuffer, \"%s\");", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, cSession, pUtilityBuffer );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 64:	// ATMWaitForCursor
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nRow )
			{
				b_nRow = TRUE;
				csLocal.Format( "     int nRow=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nColumn )
			{
				b_nColumn = TRUE;
				csLocal.Format( "     int nColumn=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nTimeout )
			{
				b_nTimeout = TRUE;
				csLocal.Format( "     int nTimeout=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     nRow = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nColumn = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nTimeout = %s;", pcsaArguments->GetAt( 3 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nRow, nColumn, nTimeout );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;



		case 65:	// ATMWaitForCursorMove
		case 67:	// ATMWaitForHostConnect
		case 68:	// ATMWaitForHostDisconnect
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nTimeout )
			{
				b_nTimeout = TRUE;
				csLocal.Format( "     int nTimeout=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     nTimeout = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nTimeout );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		case 66:	// ATMWaitForEvent
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nTable )
			{
				b_nTable = TRUE;
				csLocal.Format( "     int nTable=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nTimeout )
			{
				b_nTimeout = TRUE;
				csLocal.Format( "     int nTimeout=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "     nTable = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nTimeout = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nTable, nTimeout );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 69:	// ATMWaitForKey
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}

			if ( !b_nTimeout )
			{
				b_nTimeout = TRUE;
				csLocal.Format( "     int nTimeout=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( 4 );");
			pcsaBody->Add(csViewOutStuff);
			csViewOutStuff.Format( "     strcpy( pUtilityBuffer, \"%s\");", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nTimeout = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, pUtilityBuffer, nTimeout );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;


		case 70:	// ATMWaitForString
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nRow )
			{
				b_nRow = TRUE;
				csLocal.Format( "     int nRow=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nColumn )
			{
				b_nColumn = TRUE;
				csLocal.Format( "     int nColumn=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_pUtilityBuffer )
			{
				b_pUtilityBuffer = TRUE;
				csLocal.Format( "     char *pUtilityBuffer;");
				pcsaHeader->Add(csLocal);
			}
			else
			{
				csLocal.Format( "    free( pUtilityBuffer );");
				pcsaBody->Add(csLocal);
			}


			if ( !b_nTimeout )
			{
				b_nTimeout = TRUE;
				csLocal.Format( "     int nTimeout=0;");
				pcsaHeader->Add(csLocal);
			}


			csViewOutStuff.Format( "     nRow = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nColumn = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     pUtilityBuffer = (char *)malloc( %i );", (pcsaArguments->GetAt( 3 )).GetLength()+1 );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     strcpy( pUtilityBuffer, \"%s\" );", pcsaArguments->GetAt( 3 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nTimeout = %s;", pcsaArguments->GetAt( 4 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nRet = %s( Handle, nRow, nColumn, pUtilityBuffer, nTimeout );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);

		}
		break;



		case 71:	// ATMWaitHostQuiet
		{
			if ( !b_nRet )
			{
				b_nRet = TRUE;
				csLocal.Format( "     int nRet=0;");
				pcsaHeader->Add(csLocal);
			}
			
			if ( !b_nSettleTime )
			{
				b_nSettleTime = TRUE;
				csLocal.Format( "     int nSettleTime=0;");
				pcsaHeader->Add(csLocal);
			}

			if ( !b_nTimeout )
			{
				b_nTimeout = TRUE;
				csLocal.Format( "     int nTimeout=0;");
				pcsaHeader->Add(csLocal);
			}

			csViewOutStuff.Format( "     nSettleTime = %s;", pcsaArguments->GetAt( 1 ) );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "     nTimeout = %s;", pcsaArguments->GetAt( 2 ) );
			pcsaBody->Add(csViewOutStuff);


			csViewOutStuff.Format( "     nRet = %s( Handle, nSettleTime, nTimeout );", csFunctionName );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( " ");
			pcsaBody->Add(csViewOutStuff);
		}
		break;


		default:
		{
			csViewOutStuff.Format( "%s%i%s", "//     Function ", nFunctionNum, ". Abandon hope, all ye who enter here.  ");
			pcsaBody->Add(csViewOutStuff);
		}
		
	}

	pcsaArguments->RemoveAll();


}


void CAG_EAL_CS::finalize(CStringArray* pcsaBody)
{
	CString csLocal;

	if ( b_pUtilityBuffer )
	{
		csLocal.Format( "     free( pUtilityBuffer );");
		pcsaBody->Add(csLocal);
	}

	if ( b_pTitleBuffer )
	{
		csLocal.Format( "     free( pTitle );");
		pcsaBody->Add(csLocal);
	}

	if ( b_pWaitForBuffer )
	{
		csLocal.Format( "     free( pWaitForBuffer );");
		pcsaBody->Add(csLocal);
	}


	csLocal.Format("%s", " " );
	pcsaBody->Add(csLocal);

	csLocal.Format("%s", "     return 1;" );
	pcsaBody->Add(csLocal);

	csLocal.Format("%s", " " );
	pcsaBody->Add(csLocal);

	csLocal.Format("%s", "}" );
	pcsaBody->Add(csLocal);

	csLocal.Format("%s", " " );
	pcsaBody->Add(csLocal);
}



void CAG_EAL_CS::declareVariable(AG_VARIABLE agVariable,
								  CStringArray* pcsaHeader,
								  bool* bValue)
{
	
}

void CAG_EAL_CS::checkDebug(bool b_Debug,
									   CString csFunctionName,
									   CStringArray* pcsaBody)
{
	
}


void CAG_EAL_CS::resetVariableFlags()
{
   b_nType = FALSE;
   b_pUtilityBuffer = FALSE;
   b_nLength = FALSE;
   b_nTimeout = FALSE;
   b_nRow = FALSE;
   b_nColumn = FALSE;
   b_nIndex = FALSE;
   b_nSessState = FALSE;
   b_pTitleBuffer = FALSE;
   b_nPauseTime = FALSE;
   b_nOption = FALSE;
   b_nPosition = FALSE;
   b_pWaitForBuffer = FALSE;
   b_nSetting = FALSE;
   b_cEscape = FALSE;
   b_nSettleTime = FALSE;
   b_nRet = FALSE;
   b_cSession = FALSE;
   b_nTable = FALSE;
   b_nEvent = FALSE;
/////////////////////////////////////////////////////////////////////////////
}
