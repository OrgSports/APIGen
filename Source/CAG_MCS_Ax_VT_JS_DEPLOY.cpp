// Static Model
#include "stdafx.h"
#include "apigen.h"

#include "CAG_MCS_Ax_VT_JS_DEPLOY.h"

CAG_MCS_Ax_VT_JS_DEPLOY::CAG_MCS_Ax_VT_JS_DEPLOY()
{
	resetVariableFlags();	
}

CAG_MCS_Ax_VT_JS_DEPLOY::~CAG_MCS_Ax_VT_JS_DEPLOY()
{
	
}


void CAG_MCS_Ax_VT_JS_DEPLOY::generateHeader(CStringArray* pcsaHeader,
											   CStringArray* pcsaBody)
{
	CString csViewOutStuff;

	if (IDOK != deployParamsDlg.DoModal())
	{
		deployParamsDlg.csEditDeployUsername="Username";
		deployParamsDlg.csEditDeployPassword="Password";
		deployParamsDlg.csEditDeployURL="http://mcs3/mcs/uibroker";
		deployParamsDlg.csEditDeployLanguageCode="en";
		deployParamsDlg.csEditDeployChannel="Test092005a";
		deployParamsDlg.csEditDeployPresentationID="100";
		deployParamsDlg.csEditDeployPresentationMode="0";
	}

	csViewOutStuff.Format( "<script language=\"JavaScript\">");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  ****************************************************************************");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//          Attachmate APIGen VT MCS ActiveX Viewer");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//                 JavaScript Deployed HTML");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  This file is an HTML file generated by the API Generator to automate");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  an Attachmate MCS ActiveX viewer.  It is in a form that can be specified");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   in a link to a user");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  As you will find below, before the code specified by the user is appended");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  to this file's RunCode() method the Initialize() method will declare the");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  the basic set of objects and will connect to the session.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  Steps to use this file:");
	pcsaHeader->Add(csViewOutStuff);
	
	csViewOutStuff.Format( "//  1. The code in this file was generated with the expectation that the latest");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     version of MCS is used.  As of this writing EXTRA! X-treme 8.0 is the");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     currently shipping product.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  2. Start the MCS Management and Control Server and create a Java Terminal");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     Viewer.  This APIGen output file concerns VT hosts so, because it may");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     contain method calls not supported on other terminal types ensure that");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     a VT terminal viewer is ready for the following steps. See to it that the");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     terminal viewer is public and activated.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  3. In the Presentation Integrator's Resources tree view select the viewer");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     that you intend to associate with this code. Then, from within the Properties control ");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     specify your choice for embedded or freestanding, the header file name, and the");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     footer file name.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  4. Now drag the terminal viewer node from the Resources pane to the Design View grid on the left");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     grid.  From the choices that you specified in step #4 above you have already named the header");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     and footer for the presentation, so simply press the toolbar's Save Presentation button, name the");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     presentation, and then upload it to the MCS Server by pressing the Publish button.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  5. Now open your MCS Server and from the Products option from its left-side treeview choose the");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     Presentation Manager and then \"Manage presentations\".");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  6. Select your new presentation from the list and then provide access to users by clicking on the");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//     Assign Users and Activate buttons.  With that done the presentation is ready for use.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//  7. Now, by clicking on this HTML file in Windows Explorer or loading it via a link it should load");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//      the session and provide a Run button that will start the sequence of commands specified while");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//      running APIGen.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//      Note: The \"Debug\" function offered at the bottom of the function list will insert a");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//            message box immediately before each call that is made.  With that, you have a");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//            means to trace the progress of the JavaScript execution in the browser.");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//");
	pcsaHeader->Add(csViewOutStuff);

	time_t ltime;
	time( &ltime );

	csViewOutStuff.Format( "//");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   Generated:   %s", ctime( &ltime ) );
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( " ");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "//**************************  START MCS HEADER  **************************");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( " ");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "var term");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "var session");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "var display");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "var screen");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "var conn");
	pcsaHeader->Add(csViewOutStuff);

	csViewOutStuff.Format( "var ft");
	pcsaHeader->Add(csViewOutStuff);
	
	
	csViewOutStuff.Format( " ");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "/////////////////////////////////////////////////////////////////////////////DC");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "//");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   Function   :   Initialize");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "//");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   Purpose    :   Provides initialization code that will support using");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "//                  the methods and properties available in an MCS Java");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "//                  viewer.");
	pcsaBody->Add(csViewOutStuff);
	
	csViewOutStuff.Format( " ");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "//   Notes       :   This function is called via the onLoad specifier in ");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "//                   the footer file.");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "//");
	pcsaBody->Add(csViewOutStuff);
	
	csViewOutStuff.Format( "// ");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "///////////////////////////////////////////////////////////////////////////////");
	pcsaBody->Add(csViewOutStuff);
	
	csViewOutStuff.Format( "function Initialize()");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "{");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "   term = document.Res1;");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "   session = term.getSession();");
	pcsaBody->Add(csViewOutStuff);
	
	csViewOutStuff.Format( "   screen  = session.getScreen();");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "   conn = session.getConnection();");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "   ft = session.getFileTransfer();");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " ");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "  session.Connect();");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " ");
	pcsaBody->Add(csViewOutStuff);
	   
	csViewOutStuff.Format( "}");
	pcsaBody->Add(csViewOutStuff);
	   

	csViewOutStuff.Format( "   /////////////////  User-specified code  /////////////////");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "function RunCode()");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "{");
	pcsaBody->Add(csViewOutStuff);


}


void CAG_MCS_Ax_VT_JS_DEPLOY::appendBody(int nFunctionNum,
										   bool bPromptForValues,
										   CStringArray* pcsaArguments,
										   CStringArray* pcsaHeader,
										   CStringArray* pcsaBody)
{
	CString csViewOutStuff;
	CString csFunctionName, csFunctionNum, csString, csStringLength, csRetCode;

	csFunctionName = pcsaArguments->GetAt( 0 );

	csViewOutStuff.Format( " " );
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "   // *** %s", csFunctionName );
	pcsaBody->Add(csViewOutStuff);

	switch ( nFunctionNum )
	{
		case 0:		// AtmFileTransfer::Cancel
		{
			if ( !b_nHRESULT )
			{
				declareVariable( AG_HRESULT, pcsaHeader, &b_nHRESULT );
			}
			
			if ( !b_nFLAG )
			{
				declareVariable( AG_FLAG, pcsaHeader, &b_nFLAG );
			}
			
			if ( !b_nATMFT )
			{
				declareVariable( AG_ATMFT, pcsaHeader, &b_nATMFT );
			}
			
			csViewOutStuff.Format( "   hr = pIAtmFileTransfer->Cancel( nFlag );" );
			pcsaBody->Add(csViewOutStuff);

			csViewOutStuff.Format( "" );
			pcsaBody->Add(csViewOutStuff);

		}
		break;

		case 1:		// AtmFileTransfer::GetStatus
		case 2:		// AtmFileTransfer::Transfer
		case 3:		// AtmFileTransfer::TransferEx
		case 4:		// AtmFont::GetRectangle
		case 5:		// AtmFont::GetSize
		case 6:		// AtmHllapiCollection::SetAsDefault
		case 7:		// AtmControl::AboutBox
		case 8:		// AtmControl::DoClick
		case 9:		// AtmControl::Refresh
		case 10:	// AtmOIA::GetOIALine
		case 11:	// AtmOIA::WaitForXStatus
		case 12:	// AtmPrinterCtrl::ViewSession
		case 13:	// AtmPrinterLUEscapeSequences::Add
		case 14:	// AtmPrinterLUEscapeSequences::Remove
		case 15:	// AtmPrinterLUEscapeSequences::RemoveAll
		case 16:	// AtmScreen::FieldCount
		case 17:	// AtmScreen::FindField
		case 18:	// AtmScreen::FindString
		case 19:	// AtmScreen::FindStringEx
		case 20:	// AtmScreen::GetCursor
		case 21:	// AtmScreen::GetData
		case 22:	// AtmScreen::GetString
		case 23:	// AtmScreen::GetStringEx
		case 24:	// AtmScreen::PutString
		case 25:	// AtmScreen::PutStringEx
		case 26:	// AtmScreen::RefreshEvents
		case 27:	// AtmScreen::SendKeys
		case 28:	// AtmScreen::SetCursor
		case 29:	// AtmScreen::WaitForCursor
		case 30:	// AtmScreen::WaitForKeys
		case 31:	// AtmScreen::WaitForString
		case 32:	// AtmScreen::WaitHostQuiet
/*
		case :	// AtmScreenAsync::ClearCommunications				// Async only block
		case :	// AtmScreenAsync::ClearScreen
		case :	// AtmScreenAsync::GetColor
		case :	// AtmScreenAsync::ReadStatusLine
		case :	// AtmScreenAsync::ResetTerminal
		case :	// AtmScreenAsync::SetColor
		case :	// AtmScreenVT420::ClearUDKs

		case :	// AtmScreen3270::SendLightPen			// 3270 only block

*/	
		case 33:	// AtmScreen5250::GetErrLineHostRow		// 5250 only block
		case 34:	// AtmScreen5250::GetErrLineText
		case 35:	// AtmScreen5250::GetMsgLineHostRow
		case 36:	// AtmScreen5250::GetMsgLineText
		case 37:	// AtmScreen5250::GetSysReqLineColumn
		case 38:	// AtmScreen5250::GetSysReqLineHostRow
		case 39:	// AtmScreen5250::GetSysReqLineText
		case 40:	// AtmScreen5250::SendLMouseClick

		case 41:	// AtmSelection::GetSelection
		case 42:	// AtmSelection::IsSelected
		case 43:	// AtmSelection::SelectAll
		case 44:	// AtmSelection::SetSelection
		case 45:	// AtmSelection::Unselect
		case 46:	// AtmSession::Attach
		case 47:	// AtmSession::Connect
		case 48:	// AtmSession::Detach
		case 49:	// AtmSession::Disconnect
		case 50:	// AtmSessionStatus::EnumItem
		case 51:	// AtmSessionStatus::GetValue
		case 52:	// AtmSessionStatusCollection::RefreshIfChanged
		case 53:	// AtmTerminal::ViewSession
		case 54:	// AtmWait::Reset
		case 55:	// AtmWait::Wait
		{
			csViewOutStuff.Format( "   // APIGen has not yet implemented this method." );
			pcsaBody->Add(csViewOutStuff);
		}
		break;
	}

	pcsaArguments->RemoveAll();
}


void CAG_MCS_Ax_VT_JS_DEPLOY::finalize(CStringArray* pcsaBody)
{
	CString csViewOutStuff;

	csViewOutStuff.Format( "");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "}");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "</script>");
	pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<style type=\"text/css\">" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<!--" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( ".navtop-blue {font-family: Verdana, Tahoma, Arial, sans-serif; font-size: 16px; color: #696FA5; text-decoration: none; font-weight: bold; }" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "</style>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "" );
		pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "</head>");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "");
	pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<body Language=\"JavaScript\" onLoad=\"Initialize()\">" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<center>" );
		pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( " ");
	pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<TABLE width=\"800\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<TR>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<TD align=\"center\"></td>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<td align=\"center\" class=\"navtop-blue\">APIGen MCS ActiveX Viewer in JavaScript</TD>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "</TR>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "</TABLE>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "</center>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<P>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<CENTER>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<FORM NAME=\"form\">" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<P>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "TN3270 Host Address: <INPUT NAME=\"address\" TYPE=\"textarea\" VALUE=\"Your TN3270 Host\" SIZE=\"20,1\">" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<P>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<object id=\"term\" classid=\"clsid:CD340A64-EF5F-11CF-95C6-0004AC32CCC9\" width=\"800\" height=\"350\"></object>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<object id=\"sess\" classid=\"clsid:7F37B328-86F5-11CF-B401-08005AC024EB\"></object>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<object id=\"screen\" classid=\"clsid:3DC1AC46-CA1A-11CF-BECD-08005A9B94B7\"></object>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<object id=\"con\" classid=\"clsid:1356B571-7919-11CF-A2DA-08005A48F0E4\"></object>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<object id=\"status\" classid=\"clsid:6C7C01D3-06A9-11D0-95C7-0004AC32CCC9\"></object>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<object id=\"oia\" classid=\"clsid:B44CBC52-E0F8-11cf-BEEA-08005A9B94B7\"></object>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<object id=\"keymap\" classid=\"clsid:9CFF5962-6D7D-11D0-95D4-0004AC32CCC9\"></object>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<P>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "<INPUT TYPE=\"button\" NAME=\"Run\" VALUE=\"Run\"  OnClick=\"RunCode()\" LEFT=4644>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "</FORM>" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "" );
		pcsaBody->Add(csViewOutStuff);

		csViewOutStuff.Format( "</CENTER>" );
		pcsaBody->Add(csViewOutStuff);

		//csViewOutStuff.Format( "src=\"http://doncamcs/mcs/uibroker?SERVICEID=AtmClientUIService&METHODNAME=startClientAccessModule&ACTIONITEMS=en%3BTest051005Ax%3B\">");
		
		if ( deployParamsDlg.csEditDeployUsername.GetLength() == 0 )
		{
			if ( deployParamsDlg.csEditDeployPresentationID.GetLength() == 0 )
			{
				csViewOutStuff.Format( "src=\"http://%s?SERVICEID=AtmClientUIService&METHODNAME=openChannel&ACTIONITEMS=%s;%s\">", 
											deployParamsDlg.csEditDeployURL,
											deployParamsDlg.csEditDeployLanguageCode,
											deployParamsDlg.csEditDeployChannel);
			}
			else
			{
				csViewOutStuff.Format( "src=\"http://%s?SERVICEID=AtmClientUIService&METHODNAME=openChannel&ACTIONITEMS=%s;%s;%s;%s\">", 
											deployParamsDlg.csEditDeployURL,
											deployParamsDlg.csEditDeployLanguageCode,
											deployParamsDlg.csEditDeployChannel,
											deployParamsDlg.csEditDeployPresentationID,
											deployParamsDlg.csEditDeployPresentationMode);
			}
		}
		else
		{
			if ( deployParamsDlg.csEditDeployPresentationID.GetLength() == 0 )
			{
				csViewOutStuff.Format( "src=\"http://%s:%s@%s?SERVICEID=AtmClientUIService&METHODNAME=openChannel&ACTIONITEMS=%s;%s\">",
											deployParamsDlg.csEditDeployUsername,
											deployParamsDlg.csEditDeployPassword,
											deployParamsDlg.csEditDeployURL,
											deployParamsDlg.csEditDeployLanguageCode,
											deployParamsDlg.csEditDeployChannel );
			}
			else
			{
				csViewOutStuff.Format( "src=\"http://%s:%s@%s?SERVICEID=AtmClientUIService&METHODNAME=openChannel&ACTIONITEMS=%s;%s;%s;%s\">",
											deployParamsDlg.csEditDeployUsername,
											deployParamsDlg.csEditDeployPassword,
											deployParamsDlg.csEditDeployURL,
											deployParamsDlg.csEditDeployLanguageCode,
											deployParamsDlg.csEditDeployChannel,
											deployParamsDlg.csEditDeployPresentationID,
											deployParamsDlg.csEditDeployPresentationMode);
			}
		}

	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "        Sorry, your browser doesn't support iFrames. </IFRAME>");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "</body>");
	pcsaBody->Add(csViewOutStuff);

	csViewOutStuff.Format( "</html>");
	pcsaBody->Add(csViewOutStuff);

	b_Debug = FALSE;

}


void CAG_MCS_Ax_VT_JS_DEPLOY::declareVariable(AG_VARIABLE agVariable,
												CStringArray* pcsaHeader,
												bool* bValue)
{
	CString csLocal;
	*bValue = TRUE;
	
	switch ( agVariable )
	{
		case AG_STATUS:
		{
			csLocal.Format( "var nStatus");
		}
		break;

		case AG_UPDATED:
		{
			csLocal.Format( "var bUpdated");
		}
		break;

		case AG_UTILBUFFER:
		{
			csLocal.Format( "Dim Buffer As String");
		}
		break;

		case AG_BSTR:
		{
			csLocal.Format( "Dim v As String");
		}
		break;

		case AG_ROW:
		{
			csLocal.Format( "var nRow");
		}
		break;

		case AG_COLUMN:
		{
			csLocal.Format( "var nColumn");		
		}
		break;

		case AG_ATTRIBUTE:
		{
			csLocal.Format( "var nAttribute");
		}
		break;

		case AG_LENGTH:
		{
			csLocal.Format( "var nLength");
		}
		break;

		case AG_VALUE:
		{
			csLocal.Format( "var nValue");
		}
		break;

		case AG_RETURN:
		{
			csLocal.Format( "var bRet");
		}
		break;

		case AG_CLOSEOPTION:
		{
			csLocal.Format( "var nCloseOption");
		}
		break;

		case AG_HOST_OS:
		{
			csLocal.Format( "var nFTHostOS");
		}
		break;

		case AG_HEIGHT:
		{
			csLocal.Format( "var nHeight");
		}
		break;

		case AG_LOCALMODE:
		{
			csLocal.Format( "var bLocalMode");
		}
		break;

		case AG_SESS_SAVED:
		{
			csLocal.Format( "var bSessionSaved");
		}
		break;

		case AG_SESSIONS_CREATED:
		{
			csLocal.Format( "var Sessions" );
		}
		break;

		case AG_SESS_OPEN:
		{
			csLocal.Format( "var SessName");
		}
		break;


		case AG_SETTLE_TIME:
		{
			csLocal.Format( "var nSettleTime");
		}
		break;

		case AG_SESS_QUIET:
		{
			csLocal.Format( "var bSessionQuiet");
		}
		break;

		case AG_MENU_VISIBLE:
		{
			csLocal.Format( "var bMenuVisible");
		}
		break;

		case AG_TYPE:
		{
			csLocal.Format( "var nType");
		}
		break;

		case AG_TIMEOUT:
		{
			csLocal.Format( "var nTimeout");
		}
		break;

		case AG_PROCESS_KEYSTROKES:
		{
			csLocal.Format( "var bProcessKeystrokes");
		}
		break;

		case AG_WIDTH:
		{
			csLocal.Format( "var nWidth");
		}
		break;

		case AG_WINDOW_HANDLE:
		{
			csLocal.Format( "var hSession");
			//csLocal.Format( "   HANDLE hSession=NULL;");
		}
		break;

		case AG_WINDOW_STATE:
		{
			csLocal.Format( "var nWindowState");
		}
		break;

		case AG_COUNT:
		{
			csLocal.Format( "var nCount");
		}
		break;

		case AG_AREA:
		{
			csLocal.Format( "var Area");
		}
		break;

		// new stuff
		case AG_NAME:
		{
			csLocal.Format( "var csName" );
		}
		break;

		case AG_TERMINAL:
		{
			csLocal.Format( "var Terminal" );
		}
		break;

		case AG_OIAOBJ:
		{
			csLocal.Format( "var OIAObj" );
		}
		break;

		case AG_TEXT:
		{
			csLocal.Format( "var cText" );
		}
		break;

		case AG_EAB:
		{
			csLocal.Format( "var bEABs" );
		}
		break;

		case AG_HOST_CHARSET:
		{
			csLocal.Format( "var nCharSet" );
		}
		break;

		case AG_HOST_CODEPAGE:
		{
			csLocal.Format( "var nHostCodePage" );
		}
		break;

		case AG_KBD_LOCKED:
		{
			csLocal.Format( "var bKeyboardLocked" );
		}
		break;

		case AG_MODEL:	
		{
			csLocal.Format( "var nModel" );
		}
		break;

		case AG_STRING:
		{
			csLocal.Format( "var cString" );
		}
		break;

		case AG_MODE:
		{
			csLocal.Format( "var nMode" );
		}
		break;

		case AG_WAIT:
		{
			csLocal.Format( "var nWait" );
		}
		break;

		case AG_ATTACHED:
		{
			csLocal.Format( "var bAttached" );
		}
		break;

		case AG_CONNECTED:
		{
			csLocal.Format( "var bConnected" );
		}
		break;

		case AG_CONNECTION_OBJ:
		{
			csLocal.Format( "var conn" );
		}
		break;

		case AG_SCREEN_OBJ:
		{
			csLocal.Format( "var screen" );
		}
		break;

		case AG_STATE:
		{
			csLocal.Format( "var nState" );
		}
		break;

		case AG_PORT:
		{
			csLocal.Format( "var nPort" );
		}
		break;

	}

	pcsaHeader->Add(csLocal);

}


void CAG_MCS_Ax_VT_JS_DEPLOY::checkDebug(bool b_Debug,
										  CString csFunctionName,
										  CStringArray* pcsaBody)
{
	CString csLocal;
	
	if ( b_Debug )
	{
		csLocal.Format( "   alert( \"%s\" );", csFunctionName );
		pcsaBody->Add(csLocal);
	}
}


void CAG_MCS_Ax_VT_JS_DEPLOY::collectDeploymentParameters(CStringArray* pcsaDeploymentParameters)
{
	
}

void CAG_MCS_Ax_VT_JS_DEPLOY::resetVariableFlags()
{
   b_nHRESULT = FALSE;
   b_nFLAG = FALSE;
   b_nATMFT = FALSE;
   b_Debug=FALSE;
}
